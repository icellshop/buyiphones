import g from "os";
import k from "superagent";
import w from "util";
import { v4 as rt } from "uuid";
import x from "crypto";
const at = "8.1.0", ct = {
  version: at
};
class v extends Error {
  constructor({ message: n } = {}) {
    super(n);
  }
}
class O extends v {
}
class I extends v {
}
class S extends v {
}
class N {
  /**
   * Get the lowest SmartRate from a provided list of SmartRates.
   * @public
   * @param {Rate[]} smartrates - List of SmartRates to filter through
   * @param {number} deliveryDays - The maximum number of days allowed for delivery
   * @param {string} deliveryAccuracy - The target level of accuracy for the delivery days (e.g. 'percentile_50')
   * @returns {Rate} - The lowest SmartRate
   * @throws {FilteringError} - If no applicable rates are found
   * @throws {InvalidParameterError} - If the deliveryAccuracy value is invalid
   */
  getLowestSmartRate(n, t, e) {
    const s = /* @__PURE__ */ new Set([
      "percentile_50",
      "percentile_75",
      "percentile_85",
      "percentile_90",
      "percentile_95",
      "percentile_97",
      "percentile_99"
    ]);
    let a = null;
    const c = e.toLowerCase();
    if (!s.has(c))
      throw new I({
        message: `Invalid deliveryAccuracy value, must be one of: ${new Array(
          ...s
        ).join(", ")}`
      });
    for (let i = 0; i < n.length; i += 1) {
      const o = n[i];
      o.time_in_transit[c] > parseInt(t, 10) || (a === null || parseFloat(o.rate) < parseFloat(a.rate)) && (a = o);
    }
    if (a === null)
      throw new O({ message: w.format(h.NO_OBJECT_FOUND, "rates") });
    return a;
  }
  /**
   * Get the lowest rate from a provided list of rates.
   * @public
   * @param {Rate[]} rates - List of rates to filter through
   * @param {string[]} [carriers] - List of allowed carriers to filter by
   * @param {string[]} [services] - List of allowed services to filter by
   * @returns {Rate} - The lowest rate
   * @throws {FilteringError} - If no applicable rates are found
   */
  getLowestRate(n, t = null, e = null) {
    if (t) {
      const s = t.map((a) => a.toLowerCase());
      n = n.filter((a) => s.includes(a.carrier.toLowerCase()));
    }
    if (e) {
      const s = e.map((a) => a.toLowerCase());
      n = n.filter((a) => s.includes(a.service.toLowerCase()));
    }
    if (n.length === 0)
      throw new O({ message: w.format(h.NO_OBJECT_FOUND, "rates") });
    return n.reduce((s, a) => parseFloat(a.rate) < parseFloat(s.rate) ? a : s, n[0]);
  }
  /**
   * Validate a webhook by comparing the HMAC signature header sent from EasyPost to your shared secret.
   * If the signatures do not match, an error will be raised signifying the webhook either did not originate
   * from EasyPost or the secrets do not match. If the signatures do match, the `event_body` will be returned
   * as JSON.
   * @public
   * @param {buffer} eventBody - The raw body of the webhook event
   * @param {Object} headers - The headers of the webhook HTTP request
   * @param {string} webhookSecret - The webhook secret shared between EasyPost and your application
   * @returns {object} - The JSON-parsed webhook event body if the signature could be verified
   * @throws {SignatureVerificationError} - If the signature could not be verified
   */
  validateWebhook(n, t, e) {
    var c, i;
    let s = {};
    const a = (i = (c = t["X-Hmac-Signature"]) != null ? c : t["x-hmac-signature"]) != null ? i : null;
    if (a != null) {
      const o = e.normalize("NFKD"), d = Buffer.from(o, "utf8"), _ = Buffer.from(n).toString("utf8").replace(/("weight":\s*)(\d+)(\s*)(?=,|\})/g, "$1$2.0"), f = `hmac-sha256-hex=${x.createHmac("sha256", d).update(_, "utf-8").digest("hex")}`;
      try {
        if (x.timingSafeEqual(
          Buffer.from(a, "utf8"),
          Buffer.from(f, "utf8")
        ))
          s = JSON.parse(_);
        else
          throw new S({ message: h.WEBHOOK_DOES_NOT_MATCH });
      } catch {
        throw new S({ message: h.WEBHOOK_DOES_NOT_MATCH });
      }
    } else
      throw new S({ message: h.INVALID_WEBHOOK_SIGNATURE });
    return s;
  }
}
class h {
  static get CARRIER_ACCOUNTS_WITH_CUSTOM_CREATE_WORKFLOWS() {
    return ["FedexAccount", "FedexSmartpostAccount"];
  }
  static get CARRIER_ACCOUNT_TYPES_WITH_CUSTOM_OAUTH() {
    return [
      "AmazonShippingAccount",
      "UpsAccount",
      "UpsMailInnovationsAccount",
      "UpsSurepostAccount"
    ];
  }
  static EXTERNAL_API_CALL_FAILED = "Communication with %s failed, please try again later";
  static INVALID_API_KEY_TYPE = "Invalid API key type.";
  static INVALID_PARAMETER = "Invalid parameter: %s.";
  static INVALID_PAYMENT = "The chosen payment method is not a credit card. Please try again.";
  static INVALID_WEBHOOK_SIGNATURE = "Webhook does not contain a valid HMAC signature.";
  static MISSING_REQUIRED_PARAMETER = "Missing required parameter: %s.";
  static NO_OBJECT_FOUND = "No %s found.";
  static NO_PAYMENT_METHODS = "No payment methods are set up. Please add a payment method and try again.";
  static API_DID_NOT_RETURN_ERROR_DETAILS = "API did not return error details.";
  static WEBHOOK_DOES_NOT_MATCH = "Webhook received did not originate from EasyPost or had a webhook secret mismatch.";
  static END_OF_PAGINATION = "There are no more pages to retrieve.";
  static ERROR_DESERIALIZATION = "Error deserializing JSON response";
  static Utils = new N();
}
class m extends v {
  constructor({ message: n, code: t, statusCode: e, errors: s } = {}) {
    super({ message: n }), this.code = t, this.errors = s, this.message = n, this.statusCode = e;
  }
}
class nt extends m {
}
class it extends m {
}
class ot extends m {
}
class ut extends m {
}
class lt extends m {
}
class dt extends m {
}
class _t extends m {
}
class pt extends m {
}
class ht extends m {
}
class mt extends m {
}
class yt extends m {
}
class ft extends m {
}
class vt extends m {
}
class bt extends m {
}
class wt {
  /**
   * Recursively traverses a JSON object or array and extracts error messages
   * as strings. Adds the extracted messages to the specified messagesList array.
   *
   * @param {object|array|string} errorMessage - The JSON object or array to traverse.
   * @param {array} messagesList - The array to which extracted error messages will be added.
   */
  static traverseJsonElement(n, t) {
    if (n instanceof Object)
      for (const e of Object.values(n))
        this.traverseJsonElement(e, t);
    else if (n instanceof Array)
      for (const e of n)
        this.traverseJsonElement(e, t);
    else
      t.push(n.toString());
  }
  /**
   * Calculate and generate the appropriate {@link ApiError} based on a received HTTP response error.
   * @param {*} error - The errored HTTP response.
   * @returns {ApiError} The `ApiError`-based error corresponding to the HTTP status code.
   */
  static handleApiError(n) {
    const { statusCode: t } = n, { code: e, message: s, errors: a } = n.body.error, c = {
      message: s,
      code: e,
      statusCode: t,
      errors: a
    };
    try {
      const i = [];
      this.traverseJsonElement(c.message, i), c.message = i.join(", ");
    } catch {
      const o = {
        message: h.ERROR_DESERIALIZATION,
        code: "ERROR_DESERIALIZATION_ERROR"
      };
      return new v(o);
    }
    if (t >= 300 && t < 400)
      return new mt(c);
    switch (t) {
      case 400:
        return new nt(c);
      case 401:
        return new vt(c);
      case 402:
        return new pt(c);
      case 403:
        return new it(c);
      case 404:
        return new _t(c);
      case 405:
        return new dt(c);
      case 408:
        return new ft(c);
      case 422:
        return new lt(c);
      case 429:
        return new ht(c);
      case 500:
        return new ut(c);
      case 503:
        return new yt(c);
      case 504:
        return new ot(c);
      default:
        return new bt(c);
    }
  }
}
class Pt extends v {
}
class u {
  static id;
  static object;
  static mode;
  static created_at;
  static updated_at;
  static _params;
}
class $ extends u {
  static street1;
  static street2;
  static city;
  static state;
  static zip;
  static country;
  static residential;
  static carrier_facility;
  static name;
  static company;
  static phone;
  static email;
  static federal_tax_id;
  static state_tax_id;
  static verifications;
}
class D extends u {
  static active;
  static key;
}
class H extends u {
  static label_url;
  static num_shipments;
  static pickup;
  static reference;
  static scan_form;
  static shipments;
  static state;
  static status;
}
class M extends u {
  static ad_href;
  static ad;
  static background_color;
  static color;
  static logo_href;
  static logo;
  static name;
  static theme;
  static user_id;
}
class U extends u {
  static billing_type;
  static clone;
  static credentials;
  static description;
  static fields;
  static readable;
  static reference;
  static test_credentials;
}
class Et extends u {
  static fields;
  static type;
}
class gt extends u {
  static id;
  static object;
  static mode;
  static attachments;
  static contact_email;
  static created_at;
  static description;
  static history;
  static insurance_amount;
  static insurance_id;
  static payment_method;
  static recipient_name;
  static reference;
  static requested_amount;
  static shipment_id;
  static status_detail;
  static status_timestamp;
  static status;
  static tracking_code;
  static type;
  static updated_at;
}
class L extends u {
  static content_explanation;
  static contents_type;
  static customs_certify;
  static customs_items;
  static customs_signer;
  static declaration;
  static eel_pfc;
  static non_delivery_option;
  static restriction_comments;
  static restriction_type;
}
class B extends u {
  static code;
  static currency;
  static description;
  static hs_tariff_number;
  static origin_country;
  static quantity;
  static value;
  static weight;
}
class C extends u {
  static street1;
  static street2;
  static city;
  static state;
  static zip;
  static country;
  static name;
  static company;
  static phone;
  static email;
}
class F extends u {
  static completed_urls;
  static description;
  static pending_urls;
  static previous_attributes;
  static result;
  static status;
}
class St extends u {
  static form_type;
  static form_url;
  static submitted_electronically;
}
class q extends u {
  static amount;
  static fee;
  static from_address;
  static messages;
  static provider_id;
  static provider;
  static reference;
  static shipment_id;
  static status;
  static to_address;
  static tracking_code;
  static tracker;
}
class W extends u {
  static buyer_address;
  static from_address;
  static is_return;
  static messages;
  static rates;
  static reference;
  static return_address;
  static shipments;
  static to_address;
  /**
   * Get the lowest rate for this {@link Order}.
   * @public
   * @param {string[]} [carriers] - List of allowed carriers to filter by
   * @param {string[]} [services] - List of allowed services to filter by
   * @returns {Rate} - The lowest rate
   * @throws {FilteringError} - If no applicable rates are found
   */
  lowestRate(n, t) {
    const e = this.rates || [];
    return h.Utils.getLowestRate(e, n, t);
  }
}
class K extends u {
  static height;
  static length;
  static predefined_package;
  static weight;
  static width;
}
class V extends u {
  static response_body;
}
class z extends u {
  static address;
  static carrier_accounts;
  static confirmation;
  static instructions;
  static is_account_address;
  static max_datetime;
  static messages;
  static min_datetime;
  static pickup_rates;
  static reference;
  static shipment;
  static status;
  /**
   * Get the lowest rate for this {@link Pickup}.
   * @public
   * @param {string[]} [carriers] - List of allowed carriers to filter by
   * @param {string[]} [services] - List of allowed services to filter by
   * @returns {Rate} - The lowest rate
   * @throws {FilteringError} - If no applicable rates are found
   */
  lowestRate(n, t) {
    const e = this.pickup_rates || [];
    return h.Utils.getLowestRate(e, n, t);
  }
}
class G extends u {
  static carrier;
  static currency;
  static pickup_id;
  static rate;
  static service;
}
class J extends u {
  static label_date;
  static label_epl2_url;
  static label_file_type;
  static label_pdf_url;
  static label_resolution;
  static label_size;
  static label_type;
  static label_url;
  static label_zpl_url;
}
class Y extends u {
  static billing_type;
  static carrier_account_id;
  static carrier;
  static currency;
  static delivery_date_guaranteed;
  static delivery_date;
  static delivery_days;
  static est_delivery_days;
  static list_currency;
  static list_rate;
  static rate;
  static retail_currency;
  static retail_rate;
  static service;
  static shipment_id;
}
class X extends u {
  static carrier;
  static confirmation_number;
  static shipment_id;
  static status;
  static tracking_code;
}
class b extends u {
  static end_date;
  static include_children;
  static send_email;
  static start_date;
  static status;
  static url_expires_at;
  static url;
}
class Q extends u {
  static address;
  static batch_id;
  static form_file_type;
  static form_url;
  static message;
  static status;
  static tracking_codes;
}
class Z extends u {
  static batch_id;
  static batch_message;
  static batch_status;
  static buyer_address;
  static customs_info;
  static fees;
  static forms;
  static from_address;
  static insurance;
  static is_return;
  static messages;
  static options;
  static parcel;
  static postage_label;
  static rates;
  static reference;
  static refund_status;
  static return_address;
  static scan_form;
  static selected_rate;
  static status;
  static to_address;
  static tracker;
  static tracking_code;
  static usps_zone;
  /**
   * Get the lowest rate for this {@link Shipment}.
   * @public
   * @param {string[]} [carriers] - List of allowed carriers to filter by
   * @param {string[]} [services] - List of allowed services to filter by
   * @returns {Rate} - The lowest rate
   * @throws {FilteringError} - If no applicable rates are found
   */
  lowestRate(n, t) {
    const e = this.rates || [];
    return h.Utils.getLowestRate(e, n, t);
  }
}
class tt extends u {
  static carrier_detail;
  static carrier;
  static est_delivery_date;
  static fees;
  static finalized;
  static is_return;
  static public_url;
  static shipment_id;
  static signed_by;
  static status_detail;
  static status;
  static tracking_code;
  static tracking_details;
  static weight;
}
class et extends u {
  static api_keys;
  static balance;
  static cc_fee_rate;
  static children;
  static email;
  static insurance_fee_minimum;
  static insurance_fee_rate;
  static name;
  static parent_id;
  static phone_number;
  static price_per_shipment;
  static recharge_amount;
  static secondary_recharge_amount;
}
class st extends u {
  static disabled_at;
  static url;
}
class P extends v {
  constructor() {
    super({ message: h.END_OF_PAGINATION });
  }
}
const R = {
  adr: $,
  ak: D,
  batch: H,
  brd: M,
  ca: U,
  cfrep: b,
  clm: gt,
  cstinfo: L,
  cstitem: B,
  es: C,
  evt: F,
  hook: st,
  ins: q,
  order: W,
  payload: V,
  pickup: z,
  pickuprate: G,
  pl: J,
  plrep: b,
  prcl: K,
  rate: Y,
  refrep: b,
  rfnd: X,
  sf: Q,
  shp: Z,
  shpinvrep: b,
  shprep: b,
  trk: tt,
  trkrep: b,
  user: et
}, j = {
  Address: $,
  ApiKey: D,
  Batch: H,
  Brand: M,
  CarrierAccount: U,
  CarrierType: Et,
  CustomsInfo: L,
  CustomsItem: B,
  EasyPostObject: u,
  EndShipper: C,
  Event: F,
  Form: St,
  Insurance: q,
  Order: W,
  Parcel: K,
  Payload: V,
  Pickup: z,
  PickupRate: G,
  PostageLabel: J,
  Rate: Y,
  Refund: X,
  Report: b,
  ScanForm: Q,
  Shipment: Z,
  Tracker: tt,
  User: et,
  Webhook: st
}, l = (r) => (
  /**
   * The base class for all EasyPost client library services.
   * @param {EasyPostClient} easypostClient The {@link EasyPostClient} instance to use for API calls.
   */
  class {
    /**
     * Converts a JSON response and all its nested elements to associated {@link EasyPostObject}-based class instances.
     * @internal
     * @param {*} response The JSON response to convert (usually a `Map` or `Array`).
     * @param {*} params The parameters passed when fetching the response
     * @returns {*} An {@link EasyPostObject}-based class instance or an `Array` of {@link EasyPostObject}-based class instances.
     */
    static _convertToEasyPostObject(t, e) {
      if (Array.isArray(t))
        return t.map((s) => typeof s == "object" ? this._convertToEasyPostObject(s, e) : s);
      if (typeof t == "object" && t !== null) {
        let s;
        if (j[t.object] !== void 0)
          s = new j[t.object]();
        else if (t.id !== void 0 && R[t.id.substr(0, t.id.indexOf("_"))] !== void 0) {
          const a = t.id.substr(0, t.id.indexOf("_"));
          s = new R[a]();
        } else
          s = new u();
        return Object.keys(t).forEach((a) => {
          s[a] = this._convertToEasyPostObject(t[a], e);
        }), s._params = e, s;
      }
      return t;
    }
    /**
     * Creates an EasyPost Object via the API.
     * @internal
     * @param {string} url The URL to send the API request to.
     * @param {Object} params The parameters to send with the API request.
     * @returns {EasyPostObject|Promise<never>} The created {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async _create(t, e) {
      try {
        const s = await r._post(t, e);
        return this._convertToEasyPostObject(s.body, e);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve a list of records from the API.
     * @internal
     * @param {string} url The URL to send the API request to.
     * @param {Object} [params] The parameters to send with the API request.
     * @returns {EasyPostObject|EasyPostObject[]|Promise<never>} The retrieved {@link EasyPostObject}-based class instance(s), or a `Promise` that rejects with an error.
     */
    static async _all(t, e = {}) {
      try {
        const s = await r._get(t, e);
        return this._convertToEasyPostObject(s.body, e);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve a record from the API.
     * @internal
     * @param {string} url The URL to send the API request to.
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async _retrieve(t) {
      try {
        const e = await r._get(t);
        return this._convertToEasyPostObject(e.body);
      } catch (e) {
        return Promise.reject(e);
      }
    }
    /**
     * Retrieve the next page of specific collection of object
     * @internal
     * @param {string} url The URL to send the API request to.
     * @param {Object} collection The collection of a specific object.
     * @param {Number} pageSize The number of records to return on each page.
     * @param {Object} optionalParams The optional param for additional value in the query string.
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     * TODO: Implement this function in EndShippers and Batches once the API supports them properly.
     */
    static async _getNextPage(t, e, s, a = null, c = {}) {
      var y, f, E;
      const i = s[e];
      if (i == null || i.length == 0 || !s.has_more)
        throw new P();
      const o = (f = (y = s._params) != null ? y : i[0]._params) != null ? f : {}, d = {
        ...o,
        page_size: (E = o.page_size) != null ? E : a,
        before_id: i[i.length - 1].id,
        ...c
      }, _ = await this._all(t, d);
      if (_ == null || _[e].length == 0)
        throw new P();
      return _;
    }
  }
), Tt = (r) => (
  /**
   * The AddressService class provides methods for interacting with EasyPost {@link Address} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create an {@link Address address}.
     * See {@link https://docs.easypost.com/docs/addresses#create-an-address EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the address to be created.
     * @returns {Address} - The created address.
     */
    static async create(t) {
      const e = "addresses", s = {
        address: t
      };
      if (t.verify) {
        const a = t;
        s.verify = t.verify, delete a.verify;
      }
      if (t.verify_strict) {
        const a = t;
        s.verify_strict = t.verify_strict, delete a.verify_strict;
      }
      return this._create(e, s);
    }
    /**
     * Create and verify an {@link Address address} in a single request.
     * See {@link https://docs.easypost.com/docs/addresses#verify-an-address EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the address to be created.
     * @returns {Address} - The created and verified address.
     */
    static async createAndVerify(t) {
      const e = "addresses/create_and_verify", s = { address: t };
      try {
        const a = await r._post(e, s);
        return this._convertToEasyPostObject(a.body.address, s);
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Retrieve all {@link Address addresses} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/addresses#retrieve-all-addresses EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of addresses.
     * @returns {Object} - An object containing a list of {@link Address addresses} and pagination information.
     */
    static async all(t = {}) {
      return this._all("addresses", t);
    }
    /**
     * Retrieve the next page of Address collection.
     * @param {Object} addresses An object containing a list of {@link Address addresses} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("addresses", "addresses", t, e);
    }
    /**
     * Retrieve an {@link Address address} by its ID.
     * See {@link https://docs.easypost.com/docs/addresses#retrieve-an-address EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the address to retrieve.
     * @returns {Address} - The retrieved address.
     */
    static async retrieve(t) {
      const e = `addresses/${t}`;
      return this._retrieve(e);
    }
    /**
     * Verify an {@link Address address} by its ID.
     * See {@link https://docs.easypost.com/docs/addresses#verify-an-address EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the address to verify.
     * @returns {Address} - The verified address.
     */
    static async verifyAddress(t) {
      try {
        const e = `addresses/${t}/verify`, s = await r._get(e);
        return this._convertToEasyPostObject(s.body.address);
      } catch (e) {
        return Promise.reject(e);
      }
    }
  }
), Ot = (r) => (
  /**
   * The ApiKeyService class provides methods for interacting with EasyPost {@link ApiKey} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Retrieve all {@link ApiKey API keys} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/api-keys#retrieve-an-api-key EasyPost API Documentation} for more information.
     * @returns {Object} - An object containing the API keys associated with the current authenticated user and its child users.
     */
    static async all(t = {}) {
      return this._all("api_keys", t);
    }
    /**
     * Retrieve API Keys for a specified {@link User user}.
     * See {@link https://docs.easypost.com/docs/api-keys#retrieve-an-api-key EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the user to retrieve keys for.
     * @returns {Array} - List of associated API Keys.
     * @throws {FilteringError} If user or API Keys are not found.
     */
    static async retrieveApiKeysForUser(t) {
      const e = "api_keys";
      try {
        const s = await r._get(e), a = this._convertToEasyPostObject(s.body);
        if (a.id == t)
          return a.keys;
        a.children.forEach((c) => {
          if (c.id == t)
            return c.keys;
        });
      } catch (s) {
        return Promise.reject(s);
      }
      throw new O({ message: w.format(h.NO_OBJECT_FOUND, "child") });
    }
  }
), At = "pdf", xt = (r) => (
  /**
   * The BatchService class provides methods for interacting with EasyPost {@link Batch} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#create-a-batch EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the batch to be created.
     * @returns {Batch} - The created batch.
     */
    static async create(t) {
      const e = "batches", s = {
        batch: t
      };
      return this._create(e, s);
    }
    /**
     * Add {@link Shipment shipments} to a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#add-shipments-to-a-batch EasyPost API Documentation} for more information.
     * @param {string} id - The id of the batch to add shipments to.
     * @param {Array} shipmentIds - The ids of the shipments to add to the batch.
     * @returns {Batch} - The updated batch.
     */
    static async addShipments(t, e) {
      const s = `batches/${t}/add_shipments`, a = {
        shipments: e.map((c) => ({ id: c }))
      };
      try {
        const c = await r._post(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Removes {@link Shipment shipments} from a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#remove-shipments-from-a-batch EasyPost API Documentation} for more information.
     * @param {string} id - The id of the batch to remove shipments from.
     * @param {Array} shipmentIds - The ids of the shipments to remove from the batch.
     * @returns {Batch} - The updated batch.
     */
    static async removeShipments(t, e) {
      const s = `batches/${t}/remove_shipments`, a = {
        shipments: e.map((c) => ({ id: c }))
      };
      try {
        const c = await r._post(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Generate a label for a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#batch-labels EasyPost API Documentation} for more information.
     * @param {string} id - The id of the batch to generate a label for.
     * @param {string} fileFormat - The format of the label to generate. Defaults to 'pdf'.
     * @returns {Batch} - The updated batch.
     */
    static async generateLabel(t, e = At) {
      const s = `batches/${t}/label`, a = { file_format: e };
      try {
        const c = await r._post(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Create a {@link ScanForm scan form} for a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#manifesting-scan-form EasyPost API Documentation} for more information.
     * @param {string} id - The id of the batch to create a scan form for.
     * @returns {Batch} - The updated batch.
     */
    static async createScanForm(t) {
      const e = `batches/${t}/scan_form`;
      try {
        const s = await r._post(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Purchase a {@link Batch batch}.
     * See {@link https://docs.easypost.com/docs/batches#buy-a-batch EasyPost API Documentation} for more information.
     * @param {string} id - The id of the batch to purchase.
     * @returns {Batch} - The purchased batch.
     */
    static async buy(t) {
      const e = `batches/${t}/buy`;
      try {
        const s = await r._post(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve all {@link Batch batches} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/batches#retrieve-all-batches EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of batches.
     * @returns {Object} - An object containing a list of {@link Batch batches} and pagination information.
     */
    static async all(t = {}) {
      return this._all("batches", t);
    }
    /**
     * Retrieve a {@link Batch batch} by its ID.
     * See {@link https://docs.easypost.com/docs/batches#retrieve-batch EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the batch to retrieve.
     * @returns {Batch} - The retrieved batch.
     */
    static async retrieve(t) {
      const e = `batches/${t}`;
      return this._retrieve(e);
    }
  }
), Rt = (r) => class extends l(r) {
  /**
   * Retrieve a list of stateless {@link Rate rates} based on the provided parameters.
   * @param {Object} params - Map of parameters for the API call
   * @returns {Rate[]} - List of stateless rates
   */
  static async retrieveStatelessRates(t) {
    const e = "beta/rates", s = {
      shipment: t
    };
    try {
      const a = await r._post(e, s);
      return this._convertToEasyPostObject(a.body.rates, s);
    } catch (a) {
      return Promise.reject(a);
    }
  }
}, jt = (r) => class extends l(r) {
  /**
   * Add an existing Stripe payment method to a {@link User referral customer's} account.
   * @param {string} stripeCustomerId - The Stripe account's ID.
   * @param {string} paymentMethodReference - Reference of Stripe payment method.
   * @param {string} [priority] - Which priority to set the payment method to ('primary' or 'secondary').
   * @returns {Object} - A JSON object representing the payment method.
   */
  static async addPaymentMethod(t, e, s = "primary") {
    const a = {
      payment_method: {
        stripe_customer_id: t,
        payment_method_reference: e,
        priority: s
      }
    };
    return (await r._post("beta/referral_customers/payment_method", a)).body;
  }
  /**
   * Refund by amount for a recent payment.
   * @param {number} refundAmount - Amount to be refunded by cents.
   * @returns {Object} - A JSON object representing the refund.
   */
  static async refundByAmount(t) {
    const e = {
      refund_amount: t
    };
    return (await r._post("beta/referral_customers/refunds", e)).body;
  }
  /**
   * Refund a payment by a payment log ID.
   * @param {string} paymentLogId - ID of the payment log.
   * @returns {object} - Returns BetaPaymentRefund object.
   */
  static async refundByPaymentLog(t) {
    const e = {
      payment_log_id: t
    };
    return (await r._post("beta/referral_customers/refunds", e)).body;
  }
  /**
   * Creates a client secret to use with Stripe when adding a credit card.
   * @returns {object} - A JSON object representing the client secret.
   */
  static async createCreditCardClientSecret() {
    return (await r._post("beta/setup_intents", null)).body;
  }
  /**
   * Creates a client secret to use with Stripe when adding a credit card.
   * @returns {object} - A JSON object representing the client secret.
   */
  static async createBankAccountClientSecret(t) {
    const e = t ? { return_url: t } : null;
    return (await r._post("beta/financial_connections_sessions", e)).body;
  }
};
class T extends v {
}
const kt = (r) => (
  /**
   * The BillingService class provides methods for interacting with EasyPost's billing capabilities.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Fund your EasyPost wallet by charging your primary or secondary payment method on file.
     * See {@link https://docs.easypost.com/docs/users/billing#add-funds-to-your-wallet-one-time-charge EasyPost API Documentation} for more information.
     * @param {String} amount - The amount to charge to your payment method.
     * @param {String} priority - The priority of the payment method to charge. Can be either 'primary' or 'secondary'.
     */
    static async fundWallet(t, e = "primary") {
      const s = await this._getPaymentInfo(e.toLowerCase()), a = s[0], c = s[1], i = `${a}/${c}/charges`, o = { amount: t };
      await r._post(i, o);
    }
    /**
     * Delete a payment method from the current authenticated user's account.
     * See {@link https://docs.easypost.com/docs/users/billing#delete-a-payment-method EasyPost API Documentation} for more information.
     * @param {String} priority - The priority of the payment method to delete. Can be either 'primary' or 'secondary'.
     */
    static async deletePaymentMethod(t) {
      const e = await this._getPaymentInfo(t.toLowerCase()), s = e[0], a = e[1], c = `${s}/${a}`;
      await r._delete(c);
    }
    /**
     * Retrieve all payment methods associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/users/billing#retrieve-payment-methods EasyPost API Documentation} for more information.
     * @returns {Object} - An object containing the payment methods associated with the current authenticated user.
     */
    static async retrievePaymentMethods() {
      const e = await r._get("payment_methods");
      if (e.body.id === null)
        throw new T({ message: h.NO_PAYMENT_METHODS });
      return e.body;
    }
    /**
     * Get payment info (type of the payment method and ID of the payment method)
     * This function is intended for internal use only, please avoid using this function
     * @private
     * @param {String} priority - The priority of the payment method to retrieve. Can be either 'primary' or 'secondary'.
     * @returns {string[]} - An array of two strings, the first being the endpoint of the payment method and the second being the ID of the payment method.
     */
    static async _getPaymentInfo(t) {
      const e = await this.retrievePaymentMethods(), a = {
        primary: "primary_payment_method",
        secondary: "secondary_payment_method"
      }[t];
      let c, i, o;
      const d = "The chosen payment method is not valid. Please try again.";
      if (a !== void 0 && e[a] !== null)
        if (c = e[a].id, i = e[a].object, i === "CreditCard")
          o = "credit_cards";
        else if (i === "BankAccount")
          o = "bank_accounts";
        else
          throw new T({ message: d });
      else
        throw new T({ message: d });
      return [o, c];
    }
  }
), It = (r) => (
  /**
   * The CarrierAccountService class provides methods for interacting with EasyPost @{link CarrierAccount} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link CarrierAccount carrier account}.
     * See {@link https://docs.easypost.com/docs/carrier-accounts#create-a-carrieraccount EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the carrier account to be created.
     * @returns {CarrierAccount} - The created carrier account.
     */
    static async create(t) {
      const e = t.type;
      if (!e)
        throw new I({
          message: w.format(h.MISSING_REQUIRED_PARAMETER, "CarrierAccount type")
        });
      const s = this._selectCarrierAccountCreationEndpoint(e), a = this._wrapCarrierAccountParams(e, t);
      return this._create(s, a);
    }
    /**
     * Update a {@link CarrierAccount carrier account}.
     * See {@link https://docs.easypost.com/docs/carrier-accounts#update-a-carrieraccount EasyPost API Documentation} for more information.
     * @param {string} id - The id of the carrier account to be updated.
     * @param {Object} params - Parameters for the carrier account to be updated.
     * @returns {CarrierAccount} - The updated carrier account.
     */
    static async update(t, e) {
      const s = { carrier_account: e };
      try {
        const a = await r._patch(`carrier_accounts/${t}`, s);
        return this._convertToEasyPostObject(a.body, s);
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Delete a {@link CarrierAccount carrier account}.
     * See {@link https://docs.easypost.com/docs/carrier-accounts#delete-a-carrieraccount EasyPost API Documentation} for more information.
     * @param {string} id - The id of the carrier account to be deleted.
     * @returns {Promise|Promise<never>} - A promise that resolves when the carrier account has been deleted.
     */
    static async delete(t) {
      const e = `carrier_accounts/${t}`;
      try {
        return await r._delete(e), Promise.resolve();
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Returns the correct carrier_account endpoint when creating a record based on the type.
     * @private
     * @param {string} carrierAccountType - The type of carrier account to be created.
     * @returns {string} - The endpoint to be used for the carrier account creation request.
     */
    static _selectCarrierAccountCreationEndpoint(t) {
      return h.CARRIER_ACCOUNTS_WITH_CUSTOM_CREATE_WORKFLOWS.includes(t) ? "carrier_accounts/register" : h.CARRIER_ACCOUNT_TYPES_WITH_CUSTOM_OAUTH.includes(t) ? "carrier_accounts/register_oauth" : "carrier_accounts";
    }
    /**
     * Wraps the carrier account parameters in the correct format based on the type.
     * @private
     * @param {string} carrierAccountType - The type of carrier account to be created.
     * @param {Object} params - The parameters for the carrier account to be created.
     * @returns {Object} - The wrapped carrier account parameters.
     */
    static _wrapCarrierAccountParams(t, e) {
      return h.CARRIER_ACCOUNT_TYPES_WITH_CUSTOM_OAUTH.includes(t) ? { carrier_account_oauth_registrations: e } : { carrier_account: e };
    }
    /**
     * Retrieve all {@link CarrierAccount carrier accounts} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/carrier-accounts#retrieve-all-carrieraccounts EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of carrier accounts.
     * @returns {Object} - An object containing a list of {@link CarrierAccount carrier accounts} and pagination information.
     */
    static async all(t = {}) {
      return this._all("carrier_accounts", t);
    }
    /**
     * Retrieve a {@link CarrierAccount carrier account} by its ID.
     * See {@link https://docs.easypost.com/docs/carrier-accounts#retrieve-a-carrieraccount EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the carrier account to retrieve.
     * @returns {CarrierAccount} - The retrieved carrier account.
     */
    static async retrieve(t) {
      const e = `carrier_accounts/${t}`;
      return this._retrieve(e);
    }
  }
), Nt = (r) => class extends l(r) {
  /**
   * Retrieve a list of carrier metadata based on the provided parameters.
   * @param {Array} carriers - List of carrier in string
   * @param {Array} type - List of types in string
   * @returns {Object[]} - List of carrier metadata
   */
  static async retrieve(t = null, e = null) {
    const s = "metadata/carriers", a = {
      ...t && t.length > 0 && { carriers: t.join(",") },
      ...e && e.length > 0 && { types: e.join(",") }
    };
    try {
      const c = await r._get(s, a);
      return this._convertToEasyPostObject(c.body.carriers || [], a);
    } catch (c) {
      return Promise.reject(c);
    }
  }
}, $t = (r) => (
  /**
   * The CarrierTypeService class provides methods for interacting with EasyPost {@link CarrierType} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Retrieve all {@link CarrierType carrier types} available to the current authenticated user.
     * See {@link https://docs.easypost.com/docs/carrier-types#retrieve-available-carrier-types EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of carrier types.
     * @returns {CarrierType[]} - A list of {@link CarrierType carrier types}.
     */
    static async all(t = {}) {
      const e = "carrier_types";
      try {
        const s = await r._get(e, t);
        return this._convertToEasyPostObject(s.body, t);
      } catch (s) {
        return Promise.reject(s);
      }
    }
  }
), Dt = (r) => (
  /**
   * The ClaimService class provides methods for interacting with EasyPost {@link Claim} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Claim claim} record.
     * @param {Object} params - Parameters for the claim to be created.
     * @returns {Claim} - The created claim.
     */
    static async create(t) {
      return this._create("claims", t);
    }
    /**
     * Retrieve all {@link Claim} records associated with the current authenticated user.
     * @param {Object} [params] - Parameters to filter the claim records.
     * @returns {Object} - An object containing the list of {@link Claim claim} records and pagination information.
     */
    static async all(t = {}) {
      return this._all("claims", t);
    }
    /**
     * Retrieve the next page of Claim collection.
     * @param {Object} claims An object containing a list of {@link Claim claims} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("claims", "claims", t, e);
    }
    /**
     * Retrieve a {@link Claim claim} record by its ID.
     * @param {string} id - The ID of the claim to retrieve.
     * @returns {Claim} - The retrieved claim.
     */
    static async retrieve(t) {
      const e = `claims/${t}`;
      return this._retrieve(e);
    }
    /**
     * Cancel a {@link Claim claim} record by its ID.
     * @param {string} id - The ID of the claim to be canceled.
     * @returns {Claim} - The canceled claim.
     */
    static async cancel(t) {
      const e = `claims/${t}/cancel`;
      return this._create(e);
    }
  }
), Ht = (r) => (
  /**
   * The CustomsInfoService class provides methods for interacting with EasyPost {@link CustomsInfo} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link CustomsInfo customs info} record.
     * See {@link https://docs.easypost.com/docs/customs-infos#create-a-customsinfo EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the customs info to be created.
     * @returns {CustomsInfo} - The created customs info.
     */
    static async create(t) {
      const e = "customs_infos", s = {
        customs_info: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve a {@link CustomsInfo customs info} record by its ID.
     * See {@link https://docs.easypost.com/docs/customs-infos#retrieve-a-customsinfo EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the customs info to retrieve.
     * @returns {CustomsInfo} - The retrieved customs info.
     */
    static async retrieve(t) {
      const e = `customs_infos/${t}`;
      return this._retrieve(e);
    }
  }
), Mt = (r) => (
  /**
   * The CustomsItemService class provides methods for interacting with EasyPost {@link CustomsItem} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link CustomsItem customs item}.
     * See {@link https://docs.easypost.com/docs/customs-items#create-a-customsitem EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the customs item to be created.
     * @returns {CustomsItem} - The created customs item.
     */
    static async create(t) {
      const e = "customs_items", s = {
        customs_item: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve a {@link CustomsItem customs item} by its ID.
     * See {@link https://docs.easypost.com/docs/customs-items#retrieve-a-customsitem EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the customs item to retrieve.
     * @returns {CustomsItem} - The retrieved customs item.
     */
    static async retrieve(t) {
      const e = `customs_items/${t}`;
      return this._retrieve(e);
    }
  }
), Ut = (r) => (
  /**
   * The EndShipperService class provides methods for interacting with EasyPost {@link EndShipper} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create an {@link EndShipper end shipper}.
     * See {@link https://docs.easypost.com/docs/endshippers#create-an-endshipper EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the end shipper to be created.
     * @returns {EndShipper} - The created end shipper.
     */
    static async create(t) {
      const e = "end_shippers", s = { address: t };
      return this._create(e, s);
    }
    /**
     * Update an {@link EndShipper end shipper}.
     * See {@link https://docs.easypost.com/docs/endshippers#update-an-endshipper EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the end shipper to update.
     * @param {Object} params - Parameters for the end shipper to be updated.
     * @returns {EndShipper} - The updated end shipper.
     */
    static async update(t, e) {
      const s = `end_shippers/${t}`, a = { address: e };
      try {
        const c = await r._put(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Retrieve an {@link EndShipper end shipper} by its ID.
     * See {@link https://docs.easypost.com/docs/endshippers#retrieve-an-endshipper EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the end shipper to retrieve.
     * @returns {EndShipper} - The retrieved end shipper.
     */
    static async retrieve(t) {
      const e = `end_shippers/${t}`;
      return this._retrieve(e);
    }
    /**
     * Retrieve all {@link EndShipper end shippers} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/endshippers#retrieve-all-endshippers EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of end shippers.
     * @returns {Object} - An object containing a list of {@link EndShipper end shippers} and pagination information.
     */
    static async all(t = {}) {
      return this._all("end_shippers", t);
    }
  }
), Lt = (r) => (
  /**
   * The EventService class provides methods for interacting with EasyPost {@link Event} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Retrieve all {@link Payload payloads} for an {@link Event event}.
     * See {@link https://docs.easypost.com/docs/events/payloads#retrieve-all-payloads EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the event to retrieve payloads for.
     * @returns {Payload[]} - A list of {@link Payload payloads} for the event.
     */
    static async retrieveAllPayloads(t) {
      const e = `events/${t}/payloads`;
      try {
        const s = await r._get(e);
        return this._convertToEasyPostObject(s.body.payloads);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve a specific {@link Payload payload} for an {@link Event event}.
     * See {@link https://docs.easypost.com/docs/events/payloads#retrieve-a-payload EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the event to retrieve the payload for.
     * @param {string} payloadId - The ID of the payload to retrieve.
     * @returns {Payload} - The {@link Payload payload} for the event.
     */
    static async retrievePayload(t, e) {
      const s = `events/${t}/payloads/${e}`;
      try {
        const a = await r._get(s);
        return this._convertToEasyPostObject(a.body);
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Retrieve all {@link Event events} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/events#retrieve-all-events EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the list of events.
     * @returns {Object} - An object containing the list of {@link Event events} and pagination information.
     */
    static async all(t = {}) {
      return this._all("events", t);
    }
    /**
     * Retrieve the next page of Event collection.
     * @param {Object} events An object containing a list of {@link Event events} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("events", "events", t, e);
    }
    /**
     * Retrieve an {@link Event event} by its ID.
     * See {@link https://docs.easypost.com/docs/events#retrieve-an-event EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the event to retrieve.
     * @returns {Event} - The retrieved event.
     */
    static async retrieve(t) {
      const e = `events/${t}`;
      return this._retrieve(e);
    }
  }
), Bt = (r) => (
  /**
   * The InsuranceService class provides methods for interacting with EasyPost {@link Insurance} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create an {@link Insurance insurance} record.
     * See {@link https://docs.easypost.com/docs/insurance#create-an-insurance EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters for the insurance to be created.
     * @returns {Insurance} - The created insurance.
     */
    static async create(t) {
      const e = "insurances", s = {
        insurance: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve all {@link Insurance} records associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/insurance#retrieve-all-insurances EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the insurance records.
     * @returns {Object} - An object containing the list of {@link Insurance insurance} records and pagination information.
     */
    static async all(t = {}) {
      return this._all("insurances", t);
    }
    /**
     * Retrieve the next page of Insurance collection.
     * @param {Object} insurances An object containing a list of {@link Insurance insurances} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("insurances", "insurances", t, e);
    }
    /**
     * Retrieve an {@link Insurance insurance} record by its ID.
     * See {@link https://docs.easypost.com/docs/insurance#retrieve-an-insurance EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the insurance to retrieve.
     * @returns {Insurance} - The retrieved insurance.
     */
    static async retrieve(t) {
      const e = `insurances/${t}`;
      return this._retrieve(e);
    }
    /**
     * Refund an {@link Insurance insurance} record by its ID.
     * See {@link https://docs.easypost.com/docs/insurance#refund-an-insurance EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the insurance to be refunded.
     * @returns {Insurance} - The refunded insurance.
     */
    static async refund(t) {
      const e = `insurances/${t}/refund`, s = await r._post(e);
      return this._convertToEasyPostObject(s.body);
    }
  }
), Ct = (r) => (
  /**
   * The OrderService class provides methods for interacting with EasyPost {@link Order} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create an {@link Order order}.
     * See {@link https://docs.easypost.com/docs/orders#create-an-order EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create an order with.
     * @returns {Order} - The created order.
     */
    static async create(t) {
      const e = "orders", s = {
        order: t
      };
      return this._create(e, s);
    }
    /**
     * Purchase an {@link Order order}.
     * See {@link https://docs.easypost.com/docs/orders#buy-an-order EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the order to buy.
     * @param {string} carrier - The carrier to use for the order purchase.
     * @param {string} service - The service to use for the order purchase.
     * @returns {Order} - The purchased order.
     */
    static async buy(t, e, s) {
      const a = `orders/${t}/buy`, c = { carrier: e, service: s };
      try {
        const i = await r._post(a, c);
        return this._convertToEasyPostObject(i.body, c);
      } catch (i) {
        return Promise.reject(i);
      }
    }
    /**
     * Get updated rates for an {@link Order order}.
     * See {@link https://docs.easypost.com/docs/orders EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the order to get rates for.
     * @returns {Order} - The order with rates.
     */
    static async getRates(t) {
      const e = `orders/${t}/rates`;
      try {
        const s = await r._get(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve an {@link Order order} by its ID.
     * See {@link https://docs.easypost.com/docs/orders#retrieve-an-order EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the order to retrieve.
     * @returns {Order} - The retrieved order.
     */
    static async retrieve(t) {
      const e = `orders/${t}`;
      return this._retrieve(e);
    }
  }
), Ft = (r) => (
  /**
   * The ParcelService class provides methods for interacting with EasyPost {@link Parcel} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Parcel parcel}.
     * See {@link https://docs.easypost.com/docs/parcels#create-a-parcel EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a parcel with.
     * @returns {Parcel} - The created parcel.
     */
    static async create(t) {
      const e = "parcels", s = {
        parcel: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve a {@link Parcel parcel} by its ID.
     * See {@link https://docs.easypost.com/docs/parcels#retrieve-a-parcel EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the parcel to retrieve.
     * @returns {Parcel} - The retrieved parcel.
     */
    static async retrieve(t) {
      const e = `parcels/${t}`;
      return this._retrieve(e);
    }
  }
), qt = (r) => (
  /**
   * The PickupService class provides methods for interacting with EasyPost {@link Pickup} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Pickup pickup}.
     * See {@link https://docs.easypost.com/docs/pickups#create-a-pickup EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a pickup with.
     * @returns {Pickup} - The created pickup.
     */
    static async create(t) {
      const e = "pickups", s = {
        pickup: t
      };
      return this._create(e, s);
    }
    /**
     * Purchase a {@link Pickup pickup}.
     * See {@link https://docs.easypost.com/docs/pickups#buy-a-pickup EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the pickup to purchase.
     * @param {string} carrier - The carrier to purchase the pickup with.
     * @param {string} service - The service to purchase the pickup with.
     * @returns {Pickup} - The purchased pickup.
     */
    static async buy(t, e, s) {
      const a = `pickups/${t}/buy`, c = { carrier: e, service: s };
      try {
        const i = await r._post(a, c);
        return this._convertToEasyPostObject(i.body, c);
      } catch (i) {
        return Promise.reject(i);
      }
    }
    /**
     * Cancel a {@link Pickup pickup}.
     * See {@link https://docs.easypost.com/docs/pickups#cancel-a-pickup EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the pickup to cancel.
     * @returns {Pickup} - The cancelled pickup.
     */
    static async cancel(t) {
      const e = `pickups/${t}/cancel`;
      try {
        const s = await r._post(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve all {@link Pickup pickups} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/pickups#retrieve-all-pickups EasyPost API Documentation} for more information.
     * @param {Object} [params] - The parameters to filter the pickups by.
     * @returns {Object} - An object containing a list of {@link Pickup pickups} and pagination information.
     */
    static async all(t = {}) {
      return this._all("pickups", t);
    }
    /**
     * Retrieve the next page of Pickup collection.
     * @param {Object} pickups An object containing a list of {@link Pickup pickups} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("pickups", "pickups", t, e);
    }
    /**
     * Retrieve a {@link Pickup pickup} by its ID.
     * See {@link https://docs.easypost.com/docs/pickups#retrieve-a-pickup EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the pickup to retrieve.
     * @returns {Pickup} - The retrieved pickup.
     */
    static async retrieve(t) {
      const e = `pickups/${t}`;
      return this._retrieve(e);
    }
  }
), Wt = (r) => (
  /**
   * The RateService class provides methods for interacting with EasyPost {@link Rate} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Retrieve a {@link Rate rate} by its ID.
     * See {@link https://docs.easypost.com/docs/shipments/rates EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the rate to retrieve.
     * @returns {Rate} - The retrieved rate.
     */
    static async retrieve(t) {
      const e = `rates/${t}`;
      return this._retrieve(e);
    }
  }
);
class Kt extends m {
}
function A(r, n) {
  return p.copyClient(r, {
    apiKey: n
  });
}
async function Vt(r) {
  return (await r._get("partners/stripe_public_key")).body.public_key;
}
async function zt(r, n, t, e, s) {
  const a = `https://api.stripe.com/v1/tokens?card[number]=${n}&card[exp_month]=${t}&card[exp_year]=${e}&card[cvc]=${s}`, c = k.post(a).set({
    Authorization: `Bearer ${r}`,
    "Content-Type": "application/x-www-form-urlencoded"
  });
  try {
    return (await c).body.id;
  } catch {
    throw new Kt({
      message: w.format(h.EXTERNAL_API_CALL_FAILED, "Stripe")
    });
  }
}
async function Gt(r, n, t, e) {
  const s = A(r, n), a = "credit_cards", c = { credit_card: { stripe_object_id: t, priority: e } };
  return (await s._post(a, c)).body;
}
const Jt = (r) => (
  /**
   * The ReferralCustomerService class provides methods for interacting with EasyPost {@link User referral customer} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link User referral customer}.
     * See {@link https://docs.easypost.com/docs/users/referral-customers#create-a-referralcustomer EasyPost API Documentation} for more information.
     * @param {Object} params - The referral customer's information.
     * @returns {User} - The newly created referral customer.
     */
    static async create(t) {
      const e = "referral_customers", s = {
        user: t
      };
      return this._create(e, s);
    }
    /**
     * Update a {@link User referral customer's} email address.
     * See {@link https://docs.easypost.com/docs/users/referral-customers#update-a-referralcustomer EasyPost API Documentation} for more information.
     * @param {string} referralUserId - The ID of the referral customer to update.
     * @param {string} email - The new email address.
     * @returns {boolean} - Returns true if the referral was updated successfully, false otherwise.
     */
    static async updateEmail(t, e) {
      const s = `referral_customers/${t}`, a = { user: { email: e } };
      return await r._put(s, a), !0;
    }
    /**
     * Add a credit card to EasyPost for a ReferralCustomer without needing a Stripe account. This function requires the ReferralCustomer User's API key.
     * See {@link https://docs.easypost.com/docs/users/billing#create-credit-card EasyPost API Documentation} for more information.
     * @param {string} referralApiKey - The referral customer's production API key.
     * @param {string} number - The credit card number.
     * @param {string} expirationMonth - The credit card expiration month.
     * @param {string} expirationYear - The credit card expiration year.
     * @param {string} cvc - The credit card CVC.
     * @param {string} priority - Whether to add the card as 'primary' or 'secondary' payment method (defaults to 'primary').
     * @returns {Object} - An object representing the newly-added credit card.
     */
    static async addCreditCard(t, e, s, a, c, i = "primary") {
      const o = await Vt(r), d = await zt(
        o,
        e,
        s,
        a,
        c
      );
      return await Gt(
        r,
        t,
        d,
        i
      );
    }
    /**
     * Add a credit card to EasyPost for a ReferralCustomer with a payment method ID from Stripe.
     * This function requires the ReferralCustomer User's API key.
     * @returns {object} - A JSON object representing the credit card.
     */
    static async addCreditCardFromStripe(t, e, s = "primary") {
      const a = A(r, t), c = {
        credit_card: {
          payment_method_id: e,
          priority: s
        }
      }, o = await a._post("credit_cards", c);
      return this._convertToEasyPostObject(o.body, c);
    }
    /**
     * Add a bank account to EasyPost for a ReferralCustomer.
     * This function requires the ReferralCustomer User's API key.
     * @returns {object} - A JSON object representing the bank account.
     */
    static async addBankAccountFromStripe(t, e, s, a = "primary") {
      const c = A(r, t), i = {
        financial_connections_id: e,
        mandate_data: s,
        priority: a
      }, d = await c._post("bank_accounts", i);
      return this._convertToEasyPostObject(d.body, i);
    }
    /**
     * Retrieve all {@link User referral customers} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/users/referral-customers#retrieve-all-referralcustomers EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the referral customers by.
     * @returns {Object} - An object containing a list of {@link User referral customers} and pagination information.
     */
    static async all(t = {}) {
      return this._all("referral_customers", t);
    }
    /**
     * Retrieve the next page of Referral Customer collection.
     * @param {Object} referralCustomers An object containing a list of {@link referral referralCustomers} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("referral_customers", "referral_customers", t, e);
    }
  }
), Yt = (r) => (
  /**
   * The RefundService class provides methods for interacting with EasyPost {@link Refund} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Refund refund}.
     * See {@link https://docs.easypost.com/docs/refunds#create-a-refund EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a refund with.
     * @returns {Refund} - The created refund.
     */
    static async create(t) {
      const e = "refunds", s = {
        refund: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve all {@link Refund refunds} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/refunds#retrieve-all-refunds EasyPost API Documentation} for more information.
     * @param {Object} [params] - The parameters to filter the refunds by.
     * @returns {Object} - An object containing the list of {@link Refund refunds} and pagination information.
     */
    static async all(t = {}) {
      return this._all("refunds", t);
    }
    /**
     * Retrieve the next page of Refund collection.
     * @param {Object} refunds An object containing a list of {@link Refund refunds} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("refunds", "refunds", t, e);
    }
    /**
     * Retrieve a {@link Refund refund} by its ID.
     * See {@link https://docs.easypost.com/docs/refunds#retrieve-a-refund EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the refund to retrieve.
     * @returns {Refund} - The retrieved refund.
     */
    static async retrieve(t) {
      const e = `refunds/${t}`;
      return this._retrieve(e);
    }
  }
), Xt = (r) => (
  /**
   * The ReportService class provides methods for interacting with EasyPost {@link Report} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Report report}.
     * See {@link https://docs.easypost.com/docs/reports#create-a-report EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a report with.
     * @returns {Report} - The created report.
     */
    static async create(t) {
      const e = `reports/${t.type}`;
      return this._create(e, t);
    }
    /**
     * Retrieve all {@link Report reports} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/reports#retrieve-all-reports EasyPost API Documentation} for more information.
     * @param {Object} [params] - The parameters to filter the reports by.
     * @returns {Object} - An object containing the list of {@link Report reports} and pagination information.
     */
    static async all(t = {}) {
      const e = t.type, s = `reports/${e}`;
      delete t.type;
      try {
        const a = await r._get(s, t);
        return this._convertToEasyPostObject(a.body, { ...t, type: e });
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Retrieve the next page of Report collection.
     * @param {Object} reports An object containing a list of {@link Report reports} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      const s = `reports/${t.reports[0]._params.type}`;
      return this._getNextPage(s, "reports", t, e);
    }
    /**
     * Retrieve a {@link Report report} by its ID.
     * See {@link https://docs.easypost.com/docs/reports#retrieve-a-report EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the report to retrieve.
     * @returns {Report} - The retrieved report.
     */
    static async retrieve(t) {
      const e = `reports/${t}`;
      return this._retrieve(e);
    }
  }
), Qt = (r) => (
  /**
   * The ScanFormService class provides methods for interacting with EasyPost {@link ScanForm} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link ScanForm scan form}.
     * See {@link https://docs.easypost.com/docs/scan-form#create-a-scanform EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a scan form with.
     * @returns {ScanForm} - The created scan form.
     */
    static async create(t) {
      const e = "scan_forms";
      t.shipments && (t.shipments = t.shipments.map((a) => typeof a == "string" ? { id: a } : { id: a.id }));
      const s = {
        scan_form: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve all {@link ScanForm scan forms} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/scan-form#retrieve-all-scanforms EasyPost API Documentation} for more information.
     * @param {Object} [params] - The parameters to filter the scan forms by.
     * @returns {Object} - An object containing the list of {@link ScanForm scan forms} and pagination information.
     */
    static async all(t = {}) {
      return this._all("scan_forms", t);
    }
    /**
     * Retrieve the next page of ScanForm collection.
     * @param {Object} scanforms An object containing a list of {@link ScanForm scanforms} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("scan_forms", "scan_forms", t, e);
    }
    /**
     * Retrieve a {@link ScanForm scan form} by its ID.
     * See {@link https://docs.easypost.com/docs/scan-form#retrieve-a-scanform EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the scan form to retrieve.
     * @returns {ScanForm} - The retrieved scan form.
     */
    static async retrieve(t) {
      const e = `scan_forms/${t}`;
      return this._retrieve(e);
    }
  }
), Zt = (r) => (
  /**
   * The ShipmentService class provides methods for interacting with EasyPost {@link Shipment} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments#create-a-shipment EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a shipment with.
     * @returns {Shipment} - The created shipment.
     */
    static async create(t) {
      const e = "shipments", s = {
        shipment: t
      };
      return this._create(e, s);
    }
    /**
     * Purchase a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments#buy-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to purchase.
     * @param {Rate} rate - The rate to purchase the shipment with.
     * @param {number|null} [insuranceAmount] - The amount of insurance to purchase for the shipment.
     * @param {string|null} [endShipperId] - The ID of the end shipper to purchase the shipment with.
     * @returns {Shipment} - The purchased shipment.
     */
    static async buy(t, e, s = null, a = null) {
      let c = e;
      typeof e == "object" && (c = e.id);
      const i = `shipments/${t}/buy`, o = {
        rate: {
          id: c
        }
      };
      s && (o.insurance = s), a && (o.end_shipper_id = a);
      try {
        const d = await r._post(i, o);
        return this._convertToEasyPostObject(d.body, o);
      } catch (d) {
        return Promise.reject(d);
      }
    }
    /**
     * Convert the label format of a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments#converting-the-label-format-of-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to convert the label format of.
     * @param {string} format - The format to convert the label to.
     * @returns {Shipment} - The shipment with the converted label format.
     */
    static async convertLabelFormat(t, e) {
      const s = `shipments/${t}/label`, a = { file_format: e };
      try {
        const c = await r._get(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Regenerate {@link Rate rates} for a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments/rates#regenerate-rates-for-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to regenerate rates for.
     * @returns {Shipment} - The shipment with regenerated rates.
     */
    static async regenerateRates(t) {
      const e = `shipments/${t}/rerate`, s = {};
      try {
        const a = await r._post(e, s);
        return this._convertToEasyPostObject(a.body, s);
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Get SmartRates for a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments/shipping-smartrate#shipping-smartrate-1 EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to get SmartRates for.
     * @returns {Rate[]} - The SmartRates for the shipment.
     */
    static async getSmartRates(t) {
      const e = `shipments/${t}/smartrate`;
      try {
        const s = await r._get(e);
        return this._convertToEasyPostObject(s.body.result);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Insure a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments/shipping-insurance#insure-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to insure.
     * @param {number|string} amount - The amount to insure the shipment for.
     * @returns {Shipment} - The insured shipment.
     */
    static async insure(t, e) {
      const s = `shipments/${t}/insure`, a = { amount: e };
      try {
        const c = await r._post(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Generate a form for a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments/forms#create-form EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to generate a form for.
     * @param {string} formType - The type of form to generate.
     * @param {Map} [formOptions] - Options for the form.
     * @returns {Shipment} - The shipment with the generated form attached.
     */
    static async generateForm(t, e, s = {}) {
      const a = `shipments/${t}/forms`, c = {
        form: {
          ...s,
          type: e
        }
      };
      try {
        const i = await r._post(a, c);
        return this._convertToEasyPostObject(i.body, c);
      } catch (i) {
        return Promise.reject(i);
      }
    }
    /**
     * Refund a {@link Shipment shipment}.
     * See {@link https://docs.easypost.com/docs/shipments/shipping-refund#refund-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to refund.
     * @returns {Shipment} - The refunded shipment.
     */
    static async refund(t) {
      const e = `shipments/${t}/refund`;
      try {
        const s = await r._post(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Get the lowest SmartRate of a shipment.
     * @param {string} id - The ID of the shipment to get the lowest SmartRate of.
     * @param {number} deliveryDays - The number of days the shipment will take to deliver.
     * @param {string} deliveryAccuracy - The accuracy of the delivery days.
     * @returns {Rate} - The lowest SmartRate of the shipment.
     */
    static async lowestSmartRate(t, e, s) {
      const a = await this.getSmartRates(t);
      return h.Utils.getLowestSmartRate(
        a,
        e,
        s.toLowerCase()
      );
    }
    /**
     * Retrieve all {@link Shipment shipments} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/shipments#retrieve-all-shipments EasyPost API Documentation} for more information.
     * @param {Object} [params] - Parameters to filter the shipments by.
     * @returns {Object} - An object containing a list of {@link Shipment shipments} and pagination information.
     */
    static async all(t = {}) {
      return this._all("shipments", t);
    }
    /**
     * Retrieve the next page of Shipment collection.
     * @param {Object} shipments An object containing a list of {@link Shipment shipments} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("shipments", "shipments", t, e);
    }
    /**
     * Retrieve a {@link Shipment shipment} by its ID.
     * See {@link https://docs.easypost.com/docs/shipments#retrieve-a-shipment EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the shipment to retrieve.
     * @returns {Shipment} - The shipment with the given ID.
     */
    static async retrieve(t) {
      const e = `shipments/${t}`;
      return this._retrieve(e);
    }
    /**
     * Retrieve the estimated delivery date of each Rate via SmartRate.
     * @param {string} id - The ID of the shipment to retrieve the estimated delivery date for.
     * @param {string} plannedShipDate - The planned ship date of the shipment.
     * @returns {Array} - An array of the estimated delivery date and rates.
     */
    static async retrieveEstimatedDeliveryDate(t, e) {
      var c;
      const s = `shipments/${t}/smartrate/delivery_date`, a = {
        planned_ship_date: e
      };
      try {
        const i = await r._get(s, a);
        return this._convertToEasyPostObject((c = i.body.rates) != null ? c : [], a);
      } catch (i) {
        return Promise.reject(i);
      }
    }
    /**
     * Retrieve a recommended ship date for a {@link Shipment shipment} via the Precision Shipping API, based on a specific desired delivery date.
     * @param id - The ID of the shipment to retrieve the recommended ship date for.
     * @param desiredDeliveryDate - The desired delivery date for the shipment.
     * @returns {Array} - An array of the recommended ship date and rates.
     */
    static async recommendShipDate(t, e) {
      var c;
      const s = `shipments/${t}/smartrate/precision_shipping`, a = {
        desired_delivery_date: e
      };
      try {
        const i = await r._get(s, a);
        return this._convertToEasyPostObject((c = i.body.rates) != null ? c : [], a);
      } catch (i) {
        return Promise.reject(i);
      }
    }
  }
), te = (r) => (
  /**
   * The SmartRateService class provides methods for interacting with EasyPost SmartRate APIs.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Retrieve the estimated delivery date of each carrier-service level combination via the Smart Deliver By API, based on a specific ship date and origin-destination postal code pair.
     * @param params - The parameters to estimate the delivery date with.
     * @returns {Object} - Estimates and related metadata.
     */
    static async estimateDeliveryDate(t) {
      const e = "smartrate/deliver_by";
      try {
        const s = await r._post(e, t);
        return this._convertToEasyPostObject(s.body, t);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve a recommended ship date for each carrier-service level combination via the Smart Deliver On API, based on a specific delivery date and origin-destination postal code pair.
     * @param params - The parameters to recommend the ship date with.
     * @returns {Object} - Recommendation and related metadata.
     */
    static async recommendShipDate(t) {
      const e = "smartrate/deliver_on";
      try {
        const s = await r._post(e, t);
        return this._convertToEasyPostObject(s.body, t);
      } catch (s) {
        return Promise.reject(s);
      }
    }
  }
), ee = (r) => (
  /**
   * The TrackerService class provides methods for interacting with EasyPost {@link Tracker} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Tracker tracker}.
     * See {@link https://docs.easypost.com/docs/trackers#create-a-tracker EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a tracker with.
     * @returns {Tracker} - The created tracker.
     */
    static async create(t) {
      const e = "trackers", s = {
        tracker: t
      };
      return this._create(e, s);
    }
    /**
     * Retrieve all {@link Tracker trackers} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/trackers#retrieve-all-trackers EasyPost API Documentation} for more information.
     * @param {Object} [params] - The parameters to filter the trackers by.
     * @returns {Object} - An object containing the list of {@link Tracker trackers} and pagination information.
     */
    static async all(t = {}) {
      return this._all("trackers", t);
    }
    /**
     * Retrieve the next page of Tracker collection.
     * @param {Object} trackers An object containing a list of {@link Tracker trackers} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("trackers", "trackers", t, e);
    }
    /**
     * Retrieve a {@link Tracker tracker} by its ID.
     * See {@link https://docs.easypost.com/docs/trackers#retrieve-a-tracker EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the tracker to retrieve.
     * @returns {Tracker} - The retrieved tracker.
     */
    static async retrieve(t) {
      const e = `trackers/${t}`;
      return this._retrieve(e);
    }
  }
), se = (r) => (
  /**
   * The UserService class provides methods for interacting with EasyPost {@link User} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link User child user}.
     * See {@link https://docs.easypost.com/docs/users/child-users#create-a-child-user EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a child user with.
     * @returns {User} - The created child user.
     */
    static async create(t) {
      const e = "users", s = {
        user: t
      };
      return this._create(e, s);
    }
    /**
     * Update a {@link User user}.
     * See {@link https://docs.easypost.com/docs/users#update-a-user EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the user to update (either the current authenticated user or a child user).
     * @param {Object} params - The parameters to update the user with.
     * @returns {User} - The updated user.
     */
    static async update(t, e) {
      const s = `users/${t}`, a = {
        user: e
      };
      try {
        const c = await r._patch(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Retrieve a {@link User child user}.
     * See {@link https://docs.easypost.com/docs/users#retrieve-a-user EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the child user to retrieve.
     * @returns {User} - The retrieved child user.
     */
    static async retrieve(t) {
      const e = `users/${t}`;
      try {
        const s = await r._get(e);
        return this._convertToEasyPostObject(s.body);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve the {@link User current authenticated user}.
     * See {@link https://docs.easypost.com/docs/users#retrieve-a-user EasyPost API Documentation} for more information.
     * @returns {User} - The retrieved user.
     */
    static async retrieveMe() {
      const t = "users";
      try {
        const e = await r._get(t);
        return this._convertToEasyPostObject(e.body);
      } catch (e) {
        return Promise.reject(e);
      }
    }
    /**
     * Delete a {@link User child user}.
     * See {@link https://docs.easypost.com/docs/users/child-users#delete-a-child-user EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the child user to delete.
     * @returns {Promise|Promise<never>} - A promise that resolves when the child user is deleted successfully.
     */
    static async delete(t) {
      const e = `users/${t}`;
      try {
        return await r._delete(e), Promise.resolve();
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Update the brand of a {@link User user}.
     * See {@link https://docs.easypost.com/docs/users/brand#update-a-brand EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the user to update the brand of.
     * @param {Object} params - The parameters to update the brand with.
     * @returns {Brand} - The updated brand.
     */
    static async updateBrand(t, e) {
      const s = `users/${t}/brand`, a = { brand: e };
      try {
        const c = await r._patch(s, a);
        return this._convertToEasyPostObject(c.body, a);
      } catch (c) {
        return Promise.reject(c);
      }
    }
    /**
     * Retrieve a paginated list of children user {@link User user}.
     * See {@link https://docs.easypost.com/docs/users/child-users#retrieve-all-child-users EasyPost API Documentation} for more information.
     * @param {Object} params - Parameters to filter the list of children users.
     * @returns {Object} - An object containing a list of {@link Children User} and pagination information.
     */
    static async allChildren(t) {
      const e = "users/children";
      try {
        const s = await r._get(e, t);
        return this._convertToEasyPostObject(s.body, t);
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve the next page of children collection.
     * @param {Object} children An object containing a list of {@link Children children} and pagination information.
     * @param {Number} pageSize The number of records to return on each page
     * @returns {EasyPostObject|Promise<never>} The retrieved {@link EasyPostObject}-based class instance, or a `Promise` that rejects with an error.
     */
    static async getNextPage(t, e = null) {
      return this._getNextPage("users/children", "children", t, e);
    }
    static async _getNextPage(t, e, s, a = null) {
      var _, y, f;
      const c = s[e];
      if (c == null || c.length == 0 || !s.has_more)
        throw new P();
      const i = (y = (_ = s._params) != null ? _ : c[0]._params) != null ? y : {}, o = {
        ...i,
        page_size: (f = i.page_size) != null ? f : a,
        after_id: c[c.length - 1].id
      }, d = await this._all(t, o);
      if (d == null || d[e].length == 0)
        throw new P();
      return d;
    }
  }
), re = (r) => (
  /**
   * The WebhookService class provides methods for interacting with EasyPost {@link Webhook} objects.
   * @param {EasyPostClient} easypostClient - The pre-configured EasyPostClient instance to use for API requests with this service.
   */
  class extends l(r) {
    /**
     * Create a {@link Webhook webhook}.
     * See {@link https://docs.easypost.com/docs/webhooks#create-a-webhook EasyPost API Documentation} for more information.
     * @param {Object} params - The parameters to create a webhook with.
     * @returns {Webhook} - The created webhook.
     */
    static async create(t) {
      const e = "webhooks", s = {
        webhook: t
      };
      return this._create(e, s);
    }
    /**
     * Update a {@link Webhook webhook}.
     * A disabled webhook will be re-enabled if it is updated.
     * See {@link https://docs.easypost.com/docs/webhooks#update-a-webhook EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the webhook to update.
     * @param {Object} params - The parameters to update the webhook with.
     * @returns {Webhook} - The updated webhook.
     */
    static async update(t, e) {
      const s = `webhooks/${t}`;
      try {
        const a = await r._patch(s, e);
        return this._convertToEasyPostObject(a.body, e);
      } catch (a) {
        return Promise.reject(a);
      }
    }
    /**
     * Delete a {@link Webhook webhook}.
     * See {@link https://docs.easypost.com/docs/webhooks#delete-a-webhook EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the webhook to delete.
     * @returns {Promise|Promise<never>} - A promise that resolves if the webhook was successfully deleted.
     */
    static async delete(t) {
      const e = `webhooks/${t}`;
      try {
        return await r._delete(e), Promise.resolve();
      } catch (s) {
        return Promise.reject(s);
      }
    }
    /**
     * Retrieve all {@link Webhook webhooks} associated with the current authenticated user.
     * See {@link https://docs.easypost.com/docs/webhooks#retrieve-all-webhooks EasyPost API Documentation} for more information.
     * @param {Object} [params]
     * @returns {Webhook[]}
     */
    static async all(t = {}) {
      return this._all("webhooks", t);
    }
    /**
     * Retrieve a {@link Webhook webhook} by its ID.
     * See {@link https://docs.easypost.com/docs/webhooks#retrieve-a-webhook EasyPost API Documentation} for more information.
     * @param {string} id - The ID of the webhook to retrieve.
     * @returns {Webhook} - The retrieved webhook.
     */
    static async retrieve(t) {
      const e = `webhooks/${t}`;
      return this._retrieve(e);
    }
  }
);
class p {
  constructor(n, t = {}) {
    const { useProxy: e, timeout: s, baseUrl: a, superagentMiddleware: c, requestMiddleware: i } = t;
    if (!n && !e)
      throw new Pt({
        message: w.format(h.MISSING_REQUIRED_PARAMETER, "API Key")
      });
    this.key = n, this.timeout = s || p.DEFAULT_TIMEOUT, this.baseUrl = a || p.DEFAULT_BASE_URL, this.agent = k, this.requestMiddleware = i, this.requestHooks = [], this.responseHooks = [], this.Utils = new N(), c && (this.agent = c(this.agent)), this._attachServices(p.SERVICES);
  }
  /**
   * Add a request hook function.
   * @param {(config: object) => void} hook
   */
  addRequestHook(n) {
    this.requestHooks = [...this.requestHooks, n];
  }
  /**
   * Remove a request hook function.
   * @param {(config: object) => void} hook
   */
  removeRequestHook(n) {
    this.requestHooks = this.requestHooks.filter((t) => t !== n);
  }
  /**
   * Clear all request hooks.
   */
  clearRequestHooks() {
    this.requestHooks = [];
  }
  /**
   * Add a response hook function.
   * @param {(config: object) => void} hook
   */
  addResponseHook(n) {
    this.responseHooks = [...this.responseHooks, n];
  }
  /**
   * Remove a response hook function.
   * @param {(config: object) => void} hook
   */
  removeResponseHook(n) {
    this.responseHooks = this.responseHooks.filter((t) => t !== n);
  }
  /**
   * Clear all response hooks.
   */
  clearResponseHooks() {
    this.responseHooks = [];
  }
  /**
   * Create a copy of an {@link EasyPostClient} with overridden options.
   * @param {EasyPostClient} client The `EasyPostClient` instance to clone.
   * @param {Object} [options] The options to override.
   * @returns {EasyPostClient} A new `EasyPostClient` instance.
   */
  static copyClient(n, t = {}) {
    const { apiKey: e, useProxy: s, timeout: a, baseUrl: c, superagentMiddleware: i, requestMiddleware: o } = t, d = i ? i(n.agent) : n.agent;
    return new p(e || n.key, {
      useProxy: s || n.useProxy,
      timeout: a || n.timeout,
      baseUrl: c || n.baseUrl,
      agent: d,
      requestMiddleware: o || n.requestMiddleware
    });
  }
  /**
   * Build request headers to be sent with each EasyPost API request, combined (or overridden) by any additional headers
   * @param {Object} [additionalHeaders] Additional headers to combine or override with the default headers.
   * @returns {Object} The headers to use for the request.
   */
  static _buildHeaders(n = {}) {
    return {
      ...p.DEFAULT_HEADERS,
      ...n
    };
  }
  /**
   * Attach services to an {@link EasyPostClient} instance.
   * @param {Map} services - A map of {@link BaseService}-based service classes to construct and attach to the client.
   */
  _attachServices(n) {
    Object.keys(n).forEach((t) => {
      this[t] = n[t](this);
    });
  }
  /**
   * If the path passed in is a full URI, use it; otherwise, prepend the base url from the api.
   * @param {string} path - The path to build.
   * @returns {string} The full path to use for the HTTP request.
   */
  _buildPath(n = "") {
    if (n.indexOf("http") === 0)
      return n;
    let t = this.baseUrl + n;
    return t = n.includes("beta") ? t.replace("/v2", "") : t, t;
  }
  /**
   * Create a value to be passed to the responseHooks, based on the requestHooks
   * value and the response.
   * @param {Object} baseHooksValue - the value being passed the requestHooks
   * @param {Object} response - the response from the superagent request
   * @returns {Object} - the value to be passed to the responseHooks
   */
  _createResponseHooksValue(n, t) {
    return {
      ...n,
      httpStatus: t.status,
      responseBody: t.body,
      headers: t.headers,
      responseTimestamp: Date.now()
    };
  }
  /**
   * Make an HTTP request.
   * @param {string} [path] - The partial path to append to the base url for the request.
   * @param {string} [method] - The HTTP method to use for the request, defaults to GET.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   * @throws {ApiError} If the request fails.
   */
  async _request(n = "", t = p.METHODS.GET, e = {}, s = {}) {
    const a = this._buildPath(n), c = p._buildHeaders(s);
    let i = this.agent[t](a).set(c);
    this.requestMiddleware && (i = this.requestMiddleware(i)), this.key && i.auth(this.key);
    const o = new URL(a);
    e !== void 0 && (t === p.METHODS.GET || t === p.METHODS.DELETE ? (i.query(e), Object.entries(e).forEach(([_, y]) => {
      o.searchParams.append(_, y);
    })) : i.send(e));
    const d = {
      method: t,
      path: o.toString(),
      requestBody: i._data,
      headers: c,
      requestTimestamp: Date.now(),
      requestUUID: rt()
    };
    this.requestHooks.forEach((_) => _(d));
    try {
      const _ = await i;
      if (this.responseHooks.length > 0) {
        const y = this._createResponseHooksValue(d, _);
        this.responseHooks.forEach((f) => f(y));
      }
      return _;
    } catch (_) {
      if (_.response && _.response.body) {
        const y = this._createResponseHooksValue(d, _.response);
        throw this.responseHooks.forEach((f) => f(y)), wt.handleApiError(_.response);
      } else
        throw _;
    }
  }
  /**
   * Make a GET HTTP request.
   * @param {string} path - The partial path to append to the base url for the request.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   */
  _get(n, t = {}, e = {}) {
    return this._request(n, p.METHODS.GET, t, e);
  }
  /**
   * Make a POST HTTP request.
   * @param {string} path - The partial path to append to the base url for the request.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   */
  _post(n, t = {}, e = {}) {
    return this._request(n, p.METHODS.POST, t, e);
  }
  /**
   * Make a PUT HTTP request.
   * @param {string} path - The partial path to append to the base url for the request.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   */
  _put(n, t = {}, e = {}) {
    return this._request(n, p.METHODS.PUT, t, e);
  }
  /**
   * Make a PATCH HTTP request.
   * @param {string} path - The partial path to append to the base url for the request.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   */
  _patch(n, t = {}, e = {}) {
    return this._request(n, p.METHODS.PATCH, t, e);
  }
  /**
   * Make a DELETE HTTP request.
   * @param {string} path - The partial path to append to the base url for the request.
   * @param {Object} [params] - The parameters to send with the request.
   * @param {Object} [headers] - Additional headers to send with the request.
   * @returns {*} The response from the HTTP request.
   */
  _delete(n, t = {}, e = {}) {
    return this._request(n, p.METHODS.DELETE, t, e);
  }
}
p.MS_SECOND = 1e3;
p.DEFAULT_TIMEOUT = 60 * p.MS_SECOND;
p.DEFAULT_BASE_URL = "https://api.easypost.com/v2/";
p.DEFAULT_HEADERS = {
  Accept: "application/json",
  "Content-Type": "application/json",
  "User-Agent": `EasyPost/v2 NodejsClient/${ct.version} Nodejs/${process.versions.node} OS/${g.platform()} OSVersion/${g.release()} OSArch/${g.arch()}`
};
p.METHODS = {
  GET: "get",
  POST: "post",
  PUT: "put",
  PATCH: "patch",
  DELETE: "del"
};
p.SERVICES = {
  Address: Tt,
  ApiKey: Ot,
  Batch: xt,
  BetaRate: Rt,
  BetaReferralCustomer: jt,
  Billing: kt,
  CarrierAccount: It,
  CarrierMetadata: Nt,
  CarrierType: $t,
  Claim: Dt,
  CustomsInfo: Ht,
  CustomsItem: Mt,
  EndShipper: Ut,
  Event: Lt,
  Insurance: Bt,
  Order: Ct,
  Parcel: Ft,
  Pickup: qt,
  Rate: Wt,
  ReferralCustomer: Jt,
  Refund: Yt,
  Report: Xt,
  ScanForm: Qt,
  Shipment: Zt,
  SmartRate: te,
  Tracker: ee,
  User: se,
  Webhook: re
};
export {
  p as default
};
